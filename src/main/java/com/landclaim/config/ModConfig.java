package com.landclaim.config;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig.Type;

public class ModConfig {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    
    // Territory settings
    public static final ForgeConfigSpec.IntValue CLAIM_COST;
    public static final ForgeConfigSpec.IntValue DUNGEON_CLAIM_COST_MULTIPLIER;
    public static final ForgeConfigSpec.IntValue DISCONNECTED_CLAIM_COST_MULTIPLIER;
    public static final ForgeConfigSpec.BooleanValue REQUIRE_CONTINUOUS_CLAIMS;
    
    // Guild settings
    public static final ForgeConfigSpec.IntValue MAX_GUILD_SIZE;
    public static final ForgeConfigSpec.IntValue BASE_POWER_POINTS_PER_TOTEM;
    public static final ForgeConfigSpec.IntValue MAX_TOTEM_HEIGHT;
    public static final ForgeConfigSpec.IntValue MAX_TOTEMS_PER_MEMBER;
    public static final ForgeConfigSpec.IntValue DEFAULT_TOTEM_CHECK_HEIGHT;
    
    // Mob Spawning Controls
    public static final ForgeConfigSpec.BooleanValue SETTLEMENT_DISABLE_HOSTILE_SPAWNS;
    public static final ForgeConfigSpec.BooleanValue DUNGEON_ALLOW_ALL_SPAWNS;
    
    static {
        BUILDER.comment("Land Claim Mod Configuration");
        
        BUILDER.push("Territory Settings");
        CLAIM_COST = BUILDER.comment("Power points required to claim a chunk")
                           .defineInRange("claimCost", 100, 1, 10000);
        
        DUNGEON_CLAIM_COST_MULTIPLIER = BUILDER.comment("Multiplier for claiming Dungeon territories (x times normal cost)")
                                              .defineInRange("dungeonClaimCostMultiplier", 4, 1, 10);
        
        DISCONNECTED_CLAIM_COST_MULTIPLIER = BUILDER.comment("Multiplier for claiming chunks not connected to existing claims (x times normal cost)")
                                                  .defineInRange("disconnectedClaimCostMultiplier", 2, 1, 10);
        
        REQUIRE_CONTINUOUS_CLAIMS = BUILDER.comment("Whether new claims must be adjacent to existing claims to receive totem benefits")
                                         .define("requireContinuousClaims", true);
        BUILDER.pop();
        
        BUILDER.push("Guild Settings");
        MAX_GUILD_SIZE = BUILDER.comment("Maximum number of players in a guild")
                              .defineInRange("maxGuildSize", 10, 1, 100);
        
        BASE_POWER_POINTS_PER_TOTEM = BUILDER.comment("Base power points generated by each totem")
                                          .defineInRange("basePowerPointsPerTotem", 5, 1, 1000);
        
        MAX_TOTEM_HEIGHT = BUILDER.comment("Maximum height a totem pole can be")
                                .defineInRange("maxTotemHeight", 15, 1, 30);
        
        MAX_TOTEMS_PER_MEMBER = BUILDER.comment("Maximum number of totem poles per guild member")
                                     .defineInRange("maxTotemsPerMember", 1, 1, 10);
        
        DEFAULT_TOTEM_CHECK_HEIGHT = BUILDER.comment("Default number of blocks above the totem base that will be checked for effects")
                                     .defineInRange("defaultTotemCheckHeight", 3, 1, 15);
        
        BUILDER.pop();
        
        BUILDER.push("Mob Spawning Controls");
        SETTLEMENT_DISABLE_HOSTILE_SPAWNS = BUILDER.comment("Whether hostile mobs should be prevented from spawning in Settlement areas")
                                                 .define("settlementDisableHostileSpawns", true);
        
        DUNGEON_ALLOW_ALL_SPAWNS = BUILDER.comment("Whether all mob types can spawn in Dungeon areas (no restrictions)")
                                        .define("dungeonAllowAllSpawns", true);
        BUILDER.pop();
    }
    
    public static final ForgeConfigSpec SPEC = BUILDER.build();
    
    public static void register() {
        ModLoadingContext.get().registerConfig(Type.COMMON, SPEC, "landclaim.toml");
    }
    
    public static void updateClaimCost() {
        com.landclaim.command.ClaimCommand.setClaimCost(CLAIM_COST.get());
    }
}
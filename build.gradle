plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

// Add this section near the top of the file
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.encoding = "UTF-8"
    }
}

// Ensure Java compatibility
java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM // or another vendor you prefer
    }
    withSourcesJar()
}

minecraft {
    // Use official mappings for now
    mappings channel: 'official', version: '1.20.1'
    
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.parchmentmc.net/' }
    maven { url = "https://cursemaven.com" }  // Add this line for CurseForge Maven
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    // Include Minecraft's bundled libraries
    annotationProcessor 'org.spongepowered:mixin:0.8.5'
    implementation fg.deobf("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    
    // Remove or comment out the problematic JEI dependencies
    // compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    // compileOnly fg.deobf("curse.maven:jei-238222:4712868")
    // runtimeOnly fg.deobf("curse.maven:jei-238222:4712868")
    
    implementation 'com.google.code.gson:gson:2.10.1'
    
    testImplementation 'junit:junit:4.13.2'
}

// Process resources to replace variables
processResources {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description
    ]
    
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Configure jar task
jar {
    manifest {
        attributes([
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
    // Include license and other important files in the jar
    from('LICENSE.txt') {
        rename { "${it}_${mod_name}"}
    }
}
